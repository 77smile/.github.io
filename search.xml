<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Some adworld CTFs</title>
      <link href="/2019/09/01/4/"/>
      <url>/2019/09/01/4/</url>
      
        <content type="html"><![CDATA[<center>内部有空调哦~~菜鸟专属，高手勿扰</center><a id="more"></a><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>F5反编译C代码</p><p>分析可知，flag被存入v9，通过输入v5与v9比较，相同则就是正确flag</p><p>那么flag应该是作为程序的常量储存了起来</p><p>打开string，并没有发现flag</p><p>参考资料【反编译的结果不是一定正确的，IDA采用递归下降法进行反编译，它的优点在于很少会在反编译时把数据当作代码来处理，不过这次IDA很明显把flag当成代码，进行了反编译，因此在string界面无法找到flag】</p><p>用notepa打开查找，直接明文出现。</p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>熟悉的感觉，从1按到8就出来了^o^</p><h3 id="用ida分析"><a href="#用ida分析" class="headerlink" title="用ida分析"></a>用ida分析</h3><p>查找关键字“flag”，得到两个答案，发现第一个是the flag is不妨点进去查看，发现函数sub_45E940，双击进去，发现两串字符串</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190828190107.png" alt></p><p>嗯~ o(<em>￣▽￣</em>)o，F5，</p><p>两串字符</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190828184922.png" alt></p><p>主要函数</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190828184949.png" alt></p><p>分别异或，然后与0x13异或</p><p>发现两串字符都是56字符</p><p>对应16进制0x38，可以写出python脚本</p><pre><code>s1 = [0x12,0x40,0x62,0x5,0x2,0x4,0x6,0x3,0x6,0x30,0x31,0x41,0x20,0x0C,0x30,0x41,0x1F,0x4E,0x3E,0x20,0x31,0x20,0x1,0x39,0x60,0x3,0x15,0x9,0x4,0x3E,0x3,0x5,0x4,0x1,0x2,0x3,0x2C,0x41,0x4E,0x20,0x10,0x61,0x36,0x10,0x2C,0x34,0x20,0x40,0x59,0x2D,0x20,0x41,0x0F,0x22,0x12,0x10,0x0]s2 = [0x7B,0x20,0x12,0x62,0x77,0x6C,0x41,0x29,0x7C,0x50,0x7D,0x26,0x7C,0x6F,0x4A,0x31,0x53,0x6C,0x5E,0x6C,0x54,0x6,0x60,0x53,0x2C,0x79,0x68,0x6E,0x20,0x5F,0x75,0x65,0x63,0x7B,0x7F,0x77,0x60,0x30,0x6B,0x47,0x5C,0x1D,0x51,0x6B,0x5A,0x55,0x40,0x0C,0x2B,0x4C,0x56,0x0D,0x72,0x1,0x75,0x7E,0x0]flag = &quot;&quot;for i in range(0,0x38):    flag += chr(s1[i]^s2[i]^0x13)print flag</code></pre><p>【range( , , )默认步长是1】</p><h3 id="OOOOOOOOOOD"><a href="#OOOOOOOOOOD" class="headerlink" title="OOOOOOOOOOD"></a>OOOOOOOOOOD</h3><p>od坏了，等待更新</p><h2 id="HELLO，CTF"><a href="#HELLO，CTF" class="headerlink" title="HELLO，CTF"></a>HELLO，CTF</h2><p>无情的拖入ida，无情的F5，无情的发现v13与一串16进制数自比较，无情地转文本，无情地发现</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190828201450.png" alt></p><p>无情地验证，成功了</p><p>【python&gt;&gt;&gt;bytes.fromhex(“”)直接转】</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190829192753.png" alt></p><p>【ida里这串代码运行不了，可能是py版本问题】</p><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>开源代码，读代码，分析题意，修改程序，搞定。</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190829194957.png" alt></p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190829194942.png" alt></p><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><p>题目说有壳，那么就查一下，elf文件的upx壳。</p><p>直接打开搜flag，是这样的，看起来就是flag吖</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190829203617.png" alt></p><p>尊重题目，放入kali，解壳</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190829203256.png" alt></p><p>拖出来，查flag，，，，的确是差不多的</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190829203420.png" alt></p><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><p>打开一看是elf文件，描述没给是否有壳，还是先查一下，莫得。</p><p>放入ida，进入main函数f5查看伪码【忘记说一下，这个文件竟然是64位的】</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190901150255.png" alt></p><p>v7是ll长长整型，转char</p><p>写出python脚本</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190901152430.png" alt></p><pre><code>&gt;&gt;&gt; a=&quot;harambe&quot;&gt;&gt;&gt; b=&quot;:\&quot;AL_RT^L*.?+6/46&quot;&gt;&gt;&gt; flag=&quot;&quot;&gt;&gt;&gt; for i in range(len(b)):...     t=chr(ord(a[i%7])^ord(b[i]))...     flag+=t...&gt;&gt;&gt; flag&apos;RC3-2016-XORISGUD&apos;&gt;&gt;&gt;</code></pre><p>得出flag，OOOOOOOOk</p><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><p>elf文件，我相信他没有壳emmmm</p><p>直接扔进ida，main函数里莫得信息，查看strings window【shift+f12】</p><p>emmmm，就这么简单？？？？</p><h2 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a>no-strings-attached</h2><p>拖入ida，啪嗒啪嗒找了一大顿，找到一个解密函数，无奈看不懂，网上一搜，不会ida的动态调试，还是用gdb调试吧。。。</p><p>gdb调试</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190901162557.png" alt></p><p>然后解密</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190901162449.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AfKayAs 2</title>
      <link href="/2019/06/16/3/"/>
      <url>/2019/06/16/3/</url>
      
        <content type="html"><![CDATA[<center>AfKayAs #2 kill the Nag & Find The~~~</center><a id="more"></a>## 去弹窗程序打开后有弹窗，时间蛮长的，想办法去掉。### Timer搜索法运行后，搜索Timer![](https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190616211546.png)<p>我们找到Timer之后 在上面的位置可以看到一个0x1B58，这个是计时器的秒数。所以第一种去Neg的方法就是将0x1B58改为0x0001，保存就可以了。</p><p>但是此种方法也有一定的局限性，如果程序的作者将计时器的默认名称改掉之后 根本无法在内存中搜索到Timer关键字，也就无法下手。还有一种4C法，还没学会heihei~。</p><h2 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h2><p>首先伪码测试<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190616195257.png" alt></p><p>查找参考文本字符串，call进去之后往上找函数起始处<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190616195840.png" alt><br>在开始出断一下，跑起来之后，开始一步步往下F8。<br>大部分都看不懂，不懂得函数百度一下，最后终于找到一部分能看懂的。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190616200209.png" alt></p><p>这段代码意思就是用户长度乘上15b38再加上第一个字符的ascll。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190610204900.png" alt></p><p>然后就是一步步跟踪</p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190616200505.png" alt></p><p><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg20190616202602.png" alt></p><p>注意堆栈，这个应该就是serial了</p><p>基本算法就是（name的长度）<em>0x15B38+第一个字符的ASCII码值）转成10进制字符串</em>3-0x2+0x15算出serial。</p><p>注册机还没学会咋用，下册再写。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Open the Afkayas</title>
      <link href="/2019/06/08/2/"/>
      <url>/2019/06/08/2/</url>
      
        <content type="html"><![CDATA[<center>破解了一个比较简单的小程序，，哎嘿嘿</center><a id="more"></a><h3 id="First"><a href="#First" class="headerlink" title="First."></a>First.</h3><p>od不知道为啥坏掉了，不好用了，所以下了一个OllyICE。</p><h3 id="Second"><a href="#Second" class="headerlink" title="Second."></a>Second.</h3><p>打开文件，缺少msvbvm50.dll，于是从网上下载后安装再Afkayas同一目录，可以打开。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg1.png" alt></p><h3 id="Third"><a href="#Third" class="headerlink" title="Third."></a>Third.</h3><p>打开OllyICE，将程序拖进去。</p><h3 id="Fourth"><a href="#Fourth" class="headerlink" title="Fourth."></a>Fourth.</h3><p>打开文件后随便输入，点击OK，发现出现弹窗，留意上面的内容。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg3.png" alt></p><h3 id="Fifth"><a href="#Fifth" class="headerlink" title="Fifth."></a>Fifth.</h3><p>查找所有字符串。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg7.png" alt></p><h3 id="Sixth"><a href="#Sixth" class="headerlink" title="Sixth."></a>Sixth.</h3><p>得到这个，找到You Get Wrong这个关键词，双击进去。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg4.png" alt></p><h3 id="Seventh"><a href="#Seventh" class="headerlink" title="Seventh."></a>Seventh.</h3><p>发现是从上面跳转下来的，上一句就是JMP，无条件跳转，所以只要上面不跳转就ok了，让上面的JE改成NOP，就不会执行任何命令了。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg5.png" alt></p><h3 id="Eight"><a href="#Eight" class="headerlink" title="Eight."></a>Eight.</h3><p>保存，完事。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg9.png" alt><br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg10.png" alt></p><h3 id="Ninth"><a href="#Ninth" class="headerlink" title="Ninth."></a>Ninth.</h3><p>保存后运行。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg6.png" alt><br>完成！</p><h3 id="Tenth"><a href="#Tenth" class="headerlink" title="Tenth."></a>Tenth.</h3><p>玩一个好玩的，修改弹窗的文字。</p><p>首先在ICE中打开刚刚破解好的程序，打开程序。按之前的作找到弹窗文字出现的地方，双击进如，找到地址，在下面找到文字编辑找地址。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg4.jpg" alt></p><h3 id="Eleventh"><a href="#Eleventh" class="headerlink" title="Eleventh."></a>Eleventh.</h3><p>查找地址<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg3.jpg" alt></p><h3 id="Twelfth"><a href="#Twelfth" class="headerlink" title="Twelfth."></a>Twelfth.</h3><p>找到后将其改成Hello World<br>（注意不够的用空格代替)<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg5.jpg" alt></p><h3 id="Thirteenth"><a href="#Thirteenth" class="headerlink" title="Thirteenth."></a>Thirteenth.</h3><p>保存，完事，打开测试。<br><img src="https://raw.githubusercontent.com/77smile/Webpic/master/C%3A%5CUsers%5CCX%5CDesktop%5Cimg6.jpg" alt><br>OOOOOOOOOOOOOOOK!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Welcome To My Blog</title>
      <link href="/2019/06/04/1/"/>
      <url>/2019/06/04/1/</url>
      
        <content type="html"><![CDATA[<center>  听着这委婉动人的旋律，想起我们最美丽的相遇！<p>今生能在我的博客里遇到你，是我今生最美丽的相遇！</p><a id="more"></a></center>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
